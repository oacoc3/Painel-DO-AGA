-- Schema for Painel-DO-AGA application on Supabase
-- Generates tables, views, functions and policies used by the frontend

-- Extensions
create extension if not exists "uuid-ossp";

-- ============
-- Tables
-- ============

-- Profiles of application users (linked to auth.users)
create table if not exists profiles (
    id uuid primary key references auth.users(id) on delete cascade,
    email text not null unique,
    name text not null,
    role text not null,
    must_change_password boolean not null default false,
    created_at timestamptz not null default now()
);

-- Text models used in the app
create table if not exists models (
    id uuid primary key default uuid_generate_v4(),
    category text not null,
    title text not null,
    content text not null,
    created_at timestamptz not null default now()
);

-- Process registry
create table if not exists processes (
    id uuid primary key default uuid_generate_v4(),
    nup text not null unique,
    type text not null,
    obra_concluida boolean not null default false,
    obra_termino_date date,
    primeira_entrada date not null,
    status text not null,
    created_at timestamptz not null default now()
);

-- Internal opinions (Pareceres internos)
create table if not exists internal_opinions (
    id bigint generated by default as identity primary key,
    process_id uuid not null references processes(id) on delete cascade,
    type text not null,
    requested_at timestamptz not null,
    received_at timestamptz,
    created_at timestamptz not null default now()
);

-- Notifications to external parties
create table if not exists notifications (
    id bigint generated by default as identity primary key,
    process_id uuid not null references processes(id) on delete cascade,
    type text not null,
    requested_at timestamptz not null,
    read_at timestamptz,
    created_at timestamptz not null default now()
);

-- SIGADAER requests
create table if not exists sigadaer (
    id bigint generated by default as identity primary key,
    process_id uuid not null references processes(id) on delete cascade,
    type text not null,
    requested_at timestamptz not null,
    numbers text[] default array[]::text[],
    obs text,
    expedition_at timestamptz,
    received_at timestamptz,
    created_at timestamptz not null default now()
);

-- Checklists templates and items
create table if not exists checklist_templates (
    id bigint generated by default as identity primary key,
    name text not null,
    type text not null,
    active boolean not null default false,
    created_at timestamptz not null default now()
);

create table if not exists checklist_template_items (
    id bigint generated by default as identity primary key,
    template_id bigint not null references checklist_templates(id) on delete cascade,
    ord int not null,
    label text not null
);

-- Checklists filled by analysts
create table if not exists checklists_filled (
    id bigint generated by default as identity primary key,
    process_id uuid not null references processes(id) on delete cascade,
    template_id bigint not null references checklist_templates(id),
    filled_at timestamptz not null,
    answers jsonb not null,
    created_at timestamptz not null default now()
);

-- Audit log for process history
create table if not exists audit_log (
    id bigint generated by default as identity primary key,
    entity_id uuid not null,
    action text not null,
    user_id uuid,
    user_email text,
    created_at timestamptz not null default now()
);

-- ============
-- Functions & Triggers
-- ============

-- Generic audit function
create or replace function fn_audit_log()
returns trigger as $$
declare
    _proc uuid;
    _email text;
begin
    if TG_TABLE_NAME = 'processes' then
        _proc := coalesce(new.id, old.id);
    elsif TG_TABLE_NAME = 'internal_opinions' then
        _proc := coalesce(new.process_id, old.process_id);
    elsif TG_TABLE_NAME = 'notifications' then
        _proc := coalesce(new.process_id, old.process_id);
    elsif TG_TABLE_NAME = 'sigadaer' then
        _proc := coalesce(new.process_id, old.process_id);
    else
        _proc := null;
    end if;

    _email := (current_setting('request.jwt.claims', true)::json ->> 'email');
    insert into audit_log(entity_id, action, user_id, user_email)
    values (_proc, TG_OP || ' ' || TG_TABLE_NAME, auth.uid(), _email);
    return new;
end;
$$ language plpgsql security definer;

create trigger trg_audit_processes
    after insert or update on processes
    for each row execute procedure fn_audit_log();

create trigger trg_audit_internal_opinions
    after insert or update on internal_opinions
    for each row execute procedure fn_audit_log();

create trigger trg_audit_notifications
    after insert or update on notifications
    for each row execute procedure fn_audit_log();

create trigger trg_audit_sigadaer
    after insert or update on sigadaer
    for each row execute procedure fn_audit_log();

-- ============
-- Views and RPC helpers
-- ============

-- Consolidated list of processes with indicators
create or replace view vw_process_list as
select p.id,
       p.nup,
       p.type,
       p.status,
       p.primeira_entrada,
       (current_date - p.primeira_entrada) as dias_desde_entrada,
       exists (select 1 from internal_opinions i where i.process_id = p.id and i.received_at is null) as tem_parecer_solic,
       exists (select 1 from notifications n where n.process_id = p.id and n.read_at is null) as tem_notif_solic,
       exists (select 1 from sigadaer s where s.process_id = p.id and s.expedition_at is not null and s.received_at is null) as tem_sig_exped
from processes p;

-- Deadlines for internal opinions (ATM/DT/CGNA)
create or replace view vw_prazo_parecer_atm as
select p.nup,
       i.requested_at + interval '30 days' as prazo,
       extract(day from (i.requested_at + interval '30 days') - now())::int as restam_dias
from processes p
join internal_opinions i on i.process_id = p.id
where i.type = 'ATM' and i.received_at is null;

create or replace view vw_prazo_parecer_dt as
select p.nup,
       i.requested_at + interval '30 days' as prazo,
       extract(day from (i.requested_at + interval '30 days') - now())::int as restam_dias
from processes p
join internal_opinions i on i.process_id = p.id
where i.type = 'DT' and i.received_at is null;

create or replace view vw_prazo_parecer_cgna as
select p.nup,
       i.requested_at + interval '30 days' as prazo,
       extract(day from (i.requested_at + interval '30 days') - now())::int as restam_dias
from processes p
join internal_opinions i on i.process_id = p.id
where i.type = 'CGNA' and i.received_at is null;

-- Deadlines for SIGADAER requests without expedition
create or replace view vw_prazo_sigadaer_externos as
select p.nup,
       s.requested_at + interval '30 days' as prazo,
       extract(day from (s.requested_at + interval '30 days') - now())::int as restam_dias
from processes p
join sigadaer s on s.process_id = p.id
where s.expedition_at is null;

-- Termino de obra monitoring
create or replace view vw_prazo_termino_obra as
select p.nup,
       p.obra_termino_date as prazo,
       (p.obra_termino_date - current_date) as restam,
       case when p.obra_concluida then 'Conclu√≠da' end as obs
from processes p
where p.obra_termino_date is not null;

-- Processes that should be monitored during tramitation
create or replace view vw_monitorar_tramitacao as
select p.nup, p.type, p.status
from processes p
where p.status in ('SOB-DOC','SOB-TEC','SOB-PDIR','SOB-EXPL');

-- DO-AGA deadline per process
create or replace view vw_prazo_do_aga as
select p.nup,
       p.status as status_atual,
       case when p.status like 'SOB-%' then p.status
            else to_char(p.primeira_entrada + interval '60 days', 'YYYY-MM-DD') end as prazo_ou_status,
       case when p.status like 'SOB-%' then null::int
            else extract(day from (p.primeira_entrada + interval '60 days') - current_date)::int end as restam_dias
from processes p
where p.status <> 'ARQ';

-- RPC function used by dashboard to calculate metrics
create or replace function vw_status_metrics(p_from date default null, p_to date default null)
returns table (status text, count bigint, avg_days numeric)
language sql stable as $$
    select status,
           count(*) as count,
           avg(date_part('day', now() - primeira_entrada)) as avg_days
    from processes
    where (p_from is null or primeira_entrada >= p_from)
      and (p_to is null or primeira_entrada <= p_to)
    group by status
    order by status;
$$;

-- ============
-- Row Level Security policies
-- ============

alter table profiles enable row level security;
create policy profile_self_or_admin on profiles
    for select using (
        auth.uid() = id or exists (select 1 from profiles p where p.id = auth.uid() and p.role = 'ADMIN')
    );
create policy profile_self_update on profiles
    for update using (auth.uid() = id) with check (auth.uid() = id);

alter table models enable row level security;
create policy models_read on models for select using (true);
create policy models_write on models for all using (exists (select 1 from profiles p where p.id = auth.uid() and p.role = 'ADMIN')) with check (exists (select 1 from profiles p where p.id = auth.uid() and p.role = 'ADMIN'));

alter table processes enable row level security;
create policy processes_crud on processes for all using (true) with check (true);

alter table internal_opinions enable row level security;
create policy internal_opinions_crud on internal_opinions for all using (true) with check (true);

alter table notifications enable row level security;
create policy notifications_crud on notifications for all using (true) with check (true);

alter table sigadaer enable row level security;
create policy sigadaer_crud on sigadaer for all using (true) with check (true);

alter table checklist_templates enable row level security;
create policy checklist_templates_crud on checklist_templates for all using (true) with check (true);

alter table checklist_template_items enable row level security;
create policy checklist_template_items_crud on checklist_template_items for all using (true) with check (true);

alter table checklists_filled enable row level security;
create policy checklists_filled_crud on checklists_filled for all using (true) with check (true);

alter table audit_log enable row level security;
create policy audit_log_read on audit_log for select using (true);
